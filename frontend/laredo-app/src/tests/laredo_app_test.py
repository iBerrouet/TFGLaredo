# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestTestnavigationsuccess():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_testnavigationsuccess(self):
    self.driver.get("http://localhost:5173/")
    self.driver.set_window_size(1552, 840)
    assert self.driver.find_element(By.CSS_SELECTOR, ".undefined").text == "Create a model"
    assert self.driver.find_element(By.CSS_SELECTOR, ".ml-4").text == "Show available models"
    self.driver.find_element(By.CSS_SELECTOR, ".ml-4").click()
    WebDriverWait(self.driver, 30).until(expected_conditions.text_to_be_present_in_element((By.CSS_SELECTOR, "tr:nth-child(3) > .font-bold"), "rfc_pipeline"))
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(3) .w-6").click()
    self.driver.find_element(By.CSS_SELECTOR, ".mt-1").click()
    self.driver.find_element(By.CSS_SELECTOR, ".mt-1").click()
    element = self.driver.find_element(By.CSS_SELECTOR, ".mt-1")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".mt-1").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".mt-1").text == "rfc_pipeline"
    assert self.driver.find_element(By.CSS_SELECTOR, ".flex:nth-child(1) tr:nth-child(1) > .font-bold").text == "accuracy"
    assert self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(18) > .font-bold").text == "sensor_15"
    self.driver.find_element(By.CSS_SELECTOR, ".hover\\3A bg-transparent:nth-child(1)").click()
    self.driver.find_element(By.ID, "modelName").click()
    self.driver.find_element(By.ID, "modelName").send_keys("selenium")
    self.driver.find_element(By.ID, "problemType").click()
    dropdown = self.driver.find_element(By.ID, "problemType")
    dropdown.find_element(By.XPATH, "//option[. = 'classifier']").click()
    self.driver.find_element(By.CSS_SELECTOR, ".mt-16").click()
    self.driver.find_element(By.CSS_SELECTOR, ".text-center").click()
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".justify-center > .text-lg")
    assert len(elements) > 0
    time.sleep(10)
    assert self.driver.find_element(By.CSS_SELECTOR, ".text-white .border-l:nth-child(18)").text == "sensor_15"
    self.driver.find_element(By.CSS_SELECTOR, ".mr-6").click()
    element = self.driver.find_element(By.CSS_SELECTOR, ".mr-6")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    assert self.driver.find_element(By.CSS_SELECTOR, ".justify-center:nth-child(18) label").text == "sensor_15"
    time.sleep(2)
    self.driver.find_element(By.CSS_SELECTOR, ".justify-center:nth-child(18) .text-white").click()
    dropdown = self.driver.find_element(By.CSS_SELECTOR, ".justify-center:nth-child(18) .text-white")
    dropdown.find_element(By.XPATH, "//option[. = 'Float']").click()
    self.driver.find_element(By.ID, "machine_status").click()
    self.driver.find_element(By.CSS_SELECTOR, ".mr-6").click()
    self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) .ml-3").click()
    self.driver.find_element(By.ID, "timestamp").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(18) .text-cyan-400").text == "sensor_15"
    self.driver.find_element(By.ID, "sensor_15").click()
    self.driver.find_element(By.CSS_SELECTOR, ".text-xl").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "tbody:nth-child(3) > .bg-gray-800:nth-child(2) span").text == "SimpleImputer"
    self.driver.find_element(By.CSS_SELECTOR, "tbody:nth-child(3) > .bg-gray-800:nth-child(2) > .p-1").click()
    self.driver.find_element(By.CSS_SELECTOR, ".mr-3").click()
    self.driver.find_element(By.CSS_SELECTOR, ".border-l").click()
    element = self.driver.find_element(By.CSS_SELECTOR, ".border-l")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".border").click()
    dropdown = self.driver.find_element(By.CSS_SELECTOR, ".py-1")
    dropdown.find_element(By.XPATH, "//option[. = 'random_forest']").click()
    assert self.driver.find_element(By.CSS_SELECTOR, "tr:nth-child(1) > .text-left").text == "n_estimators"
    self.driver.find_element(By.CSS_SELECTOR, ".px-8:nth-child(1)").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".text-5xl").text == "Training your model..."
  
